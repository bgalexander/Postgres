import psycopg2


def create_db(conn):
    with conn.cursor() as cur:
        cur.execute("""
            DROP TABLE IF EXISTS phones;
            DROP TABLE IF EXISTS clients;
            
            CREATE TABLE clients (
                id SERIAL PRIMARY KEY,
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                email VARCHAR(100) UNIQUE
            );
            
            CREATE TABLE phones (
                id SERIAL PRIMARY KEY,
                client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
                phone VARCHAR(20)
            );
        """)
        conn.commit()
        print("База данных создана.")


def add_client(conn, first_name, last_name, email, phones=None):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO clients (first_name, last_name, email)
            VALUES (%s, %s, %s)
            RETURNING id;
        """, (first_name, last_name, email))
        client_id = cur.fetchone()[0]
        if phones:
            for phone in phones:
                cur.execute("""
                    INSERT INTO phones (client_id, phone)
                    VALUES (%s, %s);
                """, (client_id, phone))
        conn.commit()
        print(f"Клиент {first_name} {last_name} добавлен с ID {client_id}.")


def add_phone(conn, client_id, phone):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO phones (client_id, phone)
            VALUES (%s, %s);
        """, (client_id, phone))
        conn.commit()
        print(f"Телефон {phone} добавлен клиенту ID {client_id}.")


def change_client(conn, client_id, first_name=None, last_name=None, email=None, phones=None):
    with conn.cursor() as cur:
        if first_name:
            cur.execute("UPDATE clients SET first_name = %s WHERE id = %s;", (first_name, client_id))
        if last_name:
            cur.execute("UPDATE clients SET last_name = %s WHERE id = %s;", (last_name, client_id))
        if email:
            cur.execute("UPDATE clients SET email = %s WHERE id = %s;", (email, client_id))
        if phones is not None:
            cur.execute("DELETE FROM phones WHERE client_id = %s;", (client_id,))
            for phone in phones:
                cur.execute("INSERT INTO phones (client_id, phone) VALUES (%s, %s);", (client_id, phone))
        conn.commit()
        print(f"Данные клиента ID {client_id} обновлены.")


def delete_phone(conn, client_id, phone):
    with conn.cursor() as cur:
        cur.execute("""
            DELETE FROM phones WHERE client_id = %s AND phone = %s;
        """, (client_id, phone))
        conn.commit()
        print(f"Телефон {phone} удалён у клиента ID {client_id}.")


def delete_client(conn, client_id):
    with conn.cursor() as cur:
        cur.execute("DELETE FROM clients WHERE id = %s;", (client_id,))
        conn.commit()
        print(f"Клиент ID {client_id} удалён.")


def find_client(conn, first_name=None, last_name=None, email=None, phone=None):
    with conn.cursor() as cur:
        query = """
            SELECT c.id, c.first_name, c.last_name, c.email, p.phone
            FROM clients c
            LEFT JOIN phones p ON c.id = p.client_id
            WHERE 1=1
        """
        params = []
        if first_name:
            query += " AND c.first_name = %s"
            params.append(first_name)
        if last_name:
            query += " AND c.last_name = %s"
            params.append(last_name)
        if email:
            query += " AND c.email = %s"
            params.append(email)
        if phone:
            query += " AND p.phone = %s"
            params.append(phone)

        cur.execute(query, params)
        results = cur.fetchall()
        print("Результаты поиска:")
        for row in results:
            print(row)
        return results


# Демонстрация работы
if __name__ == "__main__":
    with psycopg2.connect(database="clients_db", user="postgres", password="postgres") as conn:
        create_db(conn)
        add_client(conn, "Иван", "Иванов", "ivanov@example.com", ["+70001112233", "+70003334455"])
        add_client(conn, "Петр", "Петров", "petrov@example.com")
        add_phone(conn, 2, "+79998887766")
        change_client(conn, 1, first_name="Иван-Обновлённый", phones=["+71112223344"])
        delete_phone(conn, 1, "+71112223344")
        find_client(conn, email="petrov@example.com")
        delete_client(conn, 2)

    conn.close()
